<?php
/**
 * we dont really know the location of autoload so we try the following two - error out if both dont work.
 */
function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}
if ((!$loader = includeIfExists(__DIR__.'/../../../vendor/autoload.php')) && (!$loader = includeIfExists(__DIR__.'/../../../../../autoload.php'))) {
    fwrite(STDERR,
        'You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL
    );
    exit(1);
}

use LUAPI\OAS3\APICodeGenerator;
use LUAPI\OAS3\PHPSwitchIndentationFixer;


//determine which command to execute
if(sizeof($argv) < 2){
    printHelpAndExit();
}
if($argv[1] == "help" || $argv[1] == "-h"){
    printHelpAndExit();
}
if($argv[1] == "create"){
    executeCreate();
}
if($argv[1] == "update"){
    executeUpdate();
}

function getOption(string $optionKey):mixed{
    global $argv;
    if(sizeof($argv) < 4){
        return null;
    }

    for($i = 0; $i < sizeof($argv); $i++){
        if($argv[$i] == $optionKey && sizeof($argv) > $i+1){
            return $argv[$i+1];
        }
    }
    return null;
}

/**
 * prints the script command help and exits
 */
function printHelpAndExit(){
    fwrite(STDOUT,
        'LUAPI OAS3 API Code Generator'.PHP_EOL.
        'Available commands:'.PHP_EOL.
        '   create              generates the inital code for a new API'.PHP_EOL.
        '       [-td]           the target directory which can contain "oas3_definition.json"'.PHP_EOL.
        '       [-vp]           the location of the vendor folder RELATIVE to target dir. leave empty if vendor dir is inside target dir'.PHP_EOL.
        '       [-op]           the path to the oas3 definition file'.PHP_EOL.
        ''.PHP_EOL.
        '   update              updates code generated by the create command'.PHP_EOL.
        '       [-td]           the target directory which can contain "oas3_definition.json" and MUST contain the "handlers" subdir'.PHP_EOL.
        '       [-vp]           the location of the vendor folder RELATIVE to target dir. leave empty if vendor dir is inside target dir'.PHP_EOL.
        '       [-op]           the path to the oas3 definition file if not set, will be "oas3_definition.json" inside -td'.PHP_EOL
    );
    exit();
}

/**
 * executes the create command
 */
function executeCreate(){
    $targetDirectory = getTargetDirectoryOrExit();
    $vendorPath = getVendorPathOrExit($targetDirectory);
    $definitionFileName = getDefinitionFilePathOrExit($targetDirectory);
    
    //create generator
    $generator = null;
    try{
        $generator = new APICodeGenerator($definitionFileName);
    } catch (Throwable $th){
        fwrite(STDERR,"invalid OAS3 definition.");
        fwrite(STDERR,$th->getMessage());
        exit(1);
    }
    
    //build the api handlers 
    try{
        $generator->buildAPI($targetDirectory,$vendorPath);
    } catch (Throwable $th){
        fwrite(STDERR,"failed to build API.\r\n");
        fwrite(STDERR,"Error MSG:" . $th->getMessage() . "\r\n");
        fwrite(STDERR,"Line:" . $th->getLine() . "\r\n");
        exit(1);
    }
    
    //run php-cs-fixer to fix the indentation of the generated documents
    try{
        exec("php vendor/bin/php-cs-fixer fix ".$targetDirectory."/handlers --config vendor/leonludwig/luapi/src/LUAPI/OAS3/csfixer-config.php");
    } catch(Throwable $th){
        fwrite(STDERR,"failed to run cs-fixer.\r\n");
        fwrite(STDERR,"Error MSG:" . $th->getMessage() . "\r\n");
        fwrite(STDERR,"Line:" . $th->getLine() . "\r\n");
        exit(1);
    }
    
    //fix indentation of switch case wusing a custom class cause cs-fixer cant help us with that
    try{
        $allFiles = getDirContents($targetDirectory);
        foreach($allFiles as $filePath){
            if(str_ends_with($filePath,".php")){
                $fixer = new PHPSwitchIndentationFixer($filePath);
                $fixer->fixSwitchesInDocument();
            }
        }
    } catch(Throwable $th){
        fwrite(STDERR,"failed to fix Switch-Cases.\r\n");
        fwrite(STDERR,"Error MSG:" . $th->getMessage() . "\r\n");
        fwrite(STDERR,"Line:" . $th->getLine() . "\r\n");
        exit(1);
    }

    fwrite(STDOUT,"DONE!");
    exit(0);
}

function executeUpdate(){
    $targetDirectory = getTargetDirectoryOrExit();
    $vendorPath = getVendorPathOrExit($targetDirectory);
    $definitionFileName = getDefinitionFilePathOrExit($targetDirectory);
    
    //create generator
    $generator = null;
    try{
        $generator = new APICodeGenerator($definitionFileName);
    } catch (Throwable $th){
        fwrite(STDERR,"invalid OAS3 definition.");
        fwrite(STDERR,$th->getMessage());
        exit(1);
    }
    
    //update existing handler documents
    try{
        $generator->updateAPI($targetDirectory,$vendorPath);
    } catch (Throwable $th){
        fwrite(STDERR,"failed to build API.\r\n");
        fwrite(STDERR,"Error MSG:" . $th->getMessage() . "\r\n");
        fwrite(STDERR,"Line:" . $th->getLine() . "\r\n");
        exit(1);
    }
    
    //run php-cs-fixer to fix the indentation of the generated documents
    try{
        exec("php vendor/bin/php-cs-fixer fix test/generator/handlers/ --config src/LUAPI/OAS3/csfixer-config.php");
    } catch(Throwable $th){
        fwrite(STDERR,"failed to run cs-fixer.\r\n");
        fwrite(STDERR,"Error MSG:" . $th->getMessage() . "\r\n");
        fwrite(STDERR,"Line:" . $th->getLine() . "\r\n");
        exit(1);
    }
    
    //fix indentation of switch case wusing a custom class cause cs-fixer cant help us with that
    try{
        $allFiles = getDirContents($targetDirectory);
        foreach($allFiles as $filePath){
            if(str_ends_with($filePath,".php")){
                $fixer = new PHPSwitchIndentationFixer($filePath);
                $fixer->fixSwitchesInDocument();
            }
        }
    } catch(Throwable $th){
        echo($th->getTraceAsString());
        fwrite(STDERR,"failed to fix Switch-Cases.\r\n");
        fwrite(STDERR,"Error MSG:" . $th->getMessage() . "\r\n");
        fwrite(STDERR,"Line:" . $th->getLine() . "\r\n");
        exit(1);
    }

    fwrite(STDOUT,"DONE!");
    exit(0);
}

/**
 * recursively itterates through the given directory and returns a list of all files and directories in it
 * @param $dir the dir to get all files & directories from
 */
function getDirContents($dir, &$results = array()) {
    $files = scandir($dir);

    foreach ($files as $key => $value) {
        $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
        if (!is_dir($path)) {
            $results[] = $path;
        } else if ($value != "." && $value != "..") {
            getDirContents($path, $results);
            $results[] = $path;
        }
    }

    return $results;
}

function getTargetDirectoryOrExit(){
    $targetDirectory = getOption("-td");
    if($targetDirectory == null || file_exists($targetDirectory) == false){
        fwrite(STDERR,"invalid target directory!" . "\r\n");
        exit(1);
    }
    return $targetDirectory;
}
function getVendorPathOrExit(string $targetDirectory){
    //get vendorPath if provided. path is relative to targetDir so "" means that the "vendor" folder is in targetDir.
    $vendorPath = getOption("-vp");
    if($vendorPath == null){ $vendorPath = ""; }
    if(file_exists($targetDirectory . $vendorPath . "/vendor/autoload.php") == false){
        fwrite(STDERR,"autoload.php not found!" . "\r\n");
        fwrite(STDERR,"generated path: " . $targetDirectory . $vendorPath . "/vendor/autoload.php" . "\r\n");
        exit(1);
    }
    return $vendorPath;
}
function getDefinitionFilePathOrExit(string $targetDirectory){
    //check if we can find any oas3 defintion file - otherwise error out
    $definitionFileName = getOption("-op");
    if($definitionFileName == null){
        if(file_exists($targetDirectory . "/oas3_definition.yaml")){
            $definitionFileName = $targetDirectory . "/oas3_definition.yaml";
        }
        if(file_exists($targetDirectory . "/oas3_definition.json")){
            $definitionFileName = $targetDirectory . "/oas3_definition.json";
        }
        if($definitionFileName == ""){
            fwrite(STDERR,"Definition file oas3_definition.[json/yaml] not found!");
            exit(1);
        }
    }
    if(file_exists($definitionFileName) == false){
        fwrite(STDERR,"Definition file '$definitionFileName' not found!");
        exit(1);
    }

    return $definitionFileName;
}
?>